/* Creating a table */

CREATE TABLE table1 (id INT, name TEXT, spend FLOAT);

/* Inserting rows into a table */

INSERT INTO table1 (id, name, spend)
VALUES (32424, 'Donald Draper', 908),
       (56239, 'Peggy Sue', 327);

/* The order of the columns specified at the top does not have to reflect the actual order in the table.
It just has to correspond with the values you are entering. */

INSERT INTO table1 (spend, name)
VALUES (501, 'Shane Little');
-- The above code would populate a new row, where id would be NULL.

/* Insert INTO also works without specifying the column names, if the names are in the correct order 
and there are none missing. But it is not recommended as error more likely*/

INSERT INTO table1
VALUES ((32725, 'Katie Lane', 201),

/*  Total */

CREATE TABLE totals AS
SELECT name, SUM(spend) AS total_spend
FROM table1
GROUP BY 1;

/* Deleting a row */

DELETE FROM totals
WHERE name = 'Donald Draper';

/* Deleting all the data from a table */
TRUNCATE TABLE totals;

-- TRUNCATE is faster than DELETE, as DELETE has to run through each row one by one.

/* Altering a column - Renaming*/

ALTER TABLE totals
RENAME total_spend TO spend;

/*Altering a column - Data Type */

ALTER TABLE classes
ALTER COLUMN student_id VARCHAR;
-- The above is changing an INT variable to VARCHAR

/* Having is used with aggregate functions, where there is a GROUP BY statement */
SELECT ticker,
min(open) as MIN
FROM stock_prices
group by 1
having min(open) > 100;


/* Partition By */
select user_id, spend, transaction_date
FROM

(SELECT *,
  ROW_NUMBER() 
  OVER(PARTITION BY user_id ORDER BY transaction_date ASC) as column1
FROM transactions) as table1
where column1 = 3;

/*Finding the rolling average*/
SELECT 
user_id,
tweet_date,
ROUND(AVG(tweet_count) 
OVER(PARTITION BY user_id
ORDER BY tweet_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),2)
FROM tweets
order by 1;


SELECT * FROM product_spend
WHERE EXTRACT(YEAR from transaction_date) = 2022;


/*Finding top 2
SELECT category, product, total_spend FROM
(SELECT category,
product,
sum(spend) as total_spend,
RANK() OVER(
PARTITION BY category order by sum(spend) desc) as ranking
FROM product_spend
WHERE EXTRACT(YEAR from transaction_date) = 2022
GROUP BY 1,2
order by 1,2) as table1
where ranking <=2
order by 1,total_spend desc;


/* DENSE_RANK() doesn't skip any ranking numbers when it encounters duplicates */
select a.name, b.department_name, a.salary
FROM
(
SELECT department_id, 
name,
salary,
DENSE_RANK() OVER(
PARTITION BY department_id ORDER BY salary DESC) as ranking

 FROM employee
) as a 
left join 
department as b 
on a.department_id = b.department_id
WHERE a.ranking <=3
order by department_name, salary desc, name;

/*When dividing integer by integer, you may have to make one of them have decimals in order to not have the answer be 0*/
/* You can use CAST(variable AS FLOAT)*/
select
ROUND(sum(confirmations)::DECIMAL/count(distinct email_id),2) as calc 
FROM
(select a.email_id,
case when b.signup_action = 'Confirmed' then 1 else 0 end as confirmations
from emails as a left join texts as b
on a.email_id = b.email_id) as table1;

/*If you can't create a temporary table, you can use WITH*/

WITH customers AS

(SELECT a.customer_id,
count(distinct b.product_category) as category_count
from customer_contracts as a 
INNER JOIN products as b 

ON a.product_id = b.product_id

group by 1)

SELECT customer_id
from customers
where category_count =
(select count(distinct product_category) from products);

/*Using filter instead of case when:*/

select day,
sum(measurement_value) FILTER (where row_number % 2 <> 0) as odd,
sum(measurement_value) FILTER (where row_number % 2 = 0) as even
from
(SELECT *,
CAST(measurement_time as date) as day,
ROW_NUMBER() OVER
(PARTITION BY extract(DAY from measurement_time) order by measurement_time asc)
FROM measurements
order by measurement_time asc) as table1
group by 1
order by 1;

/*Calculating YOY*/



SELECT 
distinct
EXTRACT(year from a.transaction_date) as year, 
a.product_id,
a.spend as curr_year_spend,
b.spend as prev_year_spend,
ROUND(((a.spend/b.spend)-1)*100,2) as yoy_rate

FROM user_transactions as a 
left join 
user_transactions as b 
on extract(year from b.transaction_date)+1 =
extract(year from a.transaction_date) 
and a.product_id = b.product_id

order by product_id, year;

--Count of previous day using LAG function
select admission_date,
count(admission_date) as counts,
lag(count(admission_date)) OVER (
  ORDER BY admission_date) as count_yesterday
  from admissions
  group by 1;

--Cross joins match all rows of one table with all rows in another table
--If one table has 5 rows, and another has 10 rows, the cross join output will have 50 rows.

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
CROSS JOIN
Orders;

-- Cross joins will occur if no join is specified and the tables are simply listed e.g.

SELECT 
Customers.CustomerName, 
Orders.OrderID
FROM Customers,
Orders;

        




 





